{
  "type": "doc",
  "attrs": {
    "id": "TS_VxEGaGC",
    "name": "从服务器获取数据",
    "articleId": "425a3a9",
    "commit": "60a60d7",
    "order": 4
  },
  "content": [
    {
      "type": "step_start",
      "attrs": {
        "commit": "60a60d7"
      }
    },
    {
      "type": "heading",
      "content": [
        {
          "type": "text",
          "text": "从服务器获取数据"
        }
      ],
      "attrs": {
        "id": "b247f399",
        "level": 2,
        "fixed": true,
        "step": {
          "id": "TS_VxEGaGC",
          "name": "从服务器获取数据",
          "articleId": "425a3a9",
          "commit": "60a60d7",
          "order": 4
        }
      }
    },
    {
      "type": "explain",
      "attrs": {
        "fixed": true,
        "level": "step",
        "pos": "pre",
        "commit": "60a60d7"
      },
      "content": [
        {
          "type": "paragraph",
          "content": [
            {
              "type": "text",
              "text": "在这一部分，我们将真正实现一个全栈应用——让前端能够向后端发起请求，从而获取想要的数据。"
            }
          ]
        }
      ]
    },
    {
      "type": "file_start",
      "attrs": {
        "commit": "60a60d7",
        "file": "api/api/urls.py"
      }
    },
    {
      "type": "explain",
      "attrs": {
        "level": "file",
        "pos": "pre",
        "commit": "60a60d7",
        "file": "api/api/urls.py"
      },
      "content": [
        {
          "type": "heading",
          "attrs": {
            "level": 3
          },
          "content": [
            {
              "type": "text",
              "text": "配置 Django 的静态文件服务"
            }
          ]
        },
        {
          "type": "paragraph",
          "content": [
            {
              "type": "text",
              "text": "首先我们要配置一下 Django 服务器，使前端能够访问其静态文件。调整 api/api/urls.py 文件如下："
            }
          ]
        }
      ]
    },
    {
      "type": "diff_block",
      "attrs": {
        "hiddenLines": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],
        "commit": "60a60d7",
        "file": "api/api/urls.py"
      }
    },
    {
      "type": "explain",
      "attrs": {
        "level": "file",
        "pos": "post",
        "commit": "60a60d7",
        "file": "api/api/urls.py"
      },
      "content": [
        {
          "type": "notice",
          "attrs": {
            "style": "warning"
          },
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "这样配置静态文件路由的方式仅应当在"
                },
                {
                  "type": "text",
                  "text": "开发环境",
                  "marks": [
                    {
                      "type": "bold"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "下使用。在生产环境下（settings.py 中的 "
                },
                {
                  "type": "text",
                  "text": "DEBUG",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " 设为 "
                },
                {
                  "type": "text",
                  "text": "False",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " 时），静态文件路由将自动失效（因为 Django 并不适合作为静态文件服务器，应该选用类似 Nginx 之类的服务器，在后续教程中我们将更深入地讨论）。"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "file_end",
      "attrs": {
        "commit": "60a60d7",
        "file": "api/api/urls.py"
      }
    },
    {
      "type": "file_start",
      "attrs": {
        "commit": "60a60d7",
        "file": "client/nuxt.config.js"
      }
    },
    {
      "type": "explain",
      "attrs": {
        "level": "file",
        "pos": "pre",
        "commit": "60a60d7",
        "file": "client/nuxt.config.js"
      },
      "content": [
        {
          "type": "heading",
          "attrs": {
            "level": 3
          },
          "content": [
            {
              "type": "text",
              "text": "实现前端的数据请求功能"
            }
          ]
        },
        {
          "type": "paragraph",
          "content": [
            {
              "type": "text",
              "text": "在客户端，我们先要对 Nuxt 进行全局配置。Nuxt 包括 "
            },
            {
              "type": "text",
              "text": "axios",
              "marks": [
                {
                  "type": "link",
                  "attrs": {
                    "href": "https://github.com/axios/axios",
                    "title": ""
                  }
                }
              ]
            },
            {
              "type": "text",
              "text": " 包，这是一个非常出色的基于 Promise 的 HTTP 请求库。在 nuxt.config.js 中的 "
            },
            {
              "type": "text",
              "text": "axios",
              "marks": [
                {
                  "type": "code"
                }
              ]
            },
            {
              "type": "text",
              "text": " 一项中添加 Django 服务器的 URL："
            }
          ]
        }
      ]
    },
    {
      "type": "diff_block",
      "attrs": {
        "hiddenLines": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          33,
          34,
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          46,
          47,
          55,
          56,
          57,
          58,
          59,
          60,
          61,
          62,
          63
        ],
        "commit": "60a60d7",
        "file": "client/nuxt.config.js"
      }
    },
    {
      "type": "explain",
      "attrs": {
        "level": "file",
        "pos": "post",
        "commit": "60a60d7",
        "file": "client/nuxt.config.js"
      },
      "content": [
        {
          "type": "paragraph",
          "content": []
        }
      ]
    },
    {
      "type": "file_end",
      "attrs": {
        "commit": "60a60d7",
        "file": "client/nuxt.config.js"
      }
    },
    {
      "type": "file_start",
      "attrs": {
        "commit": "60a60d7",
        "file": "client/pages/recipes/index.vue"
      }
    },
    {
      "type": "explain",
      "attrs": {
        "level": "file",
        "pos": "pre",
        "commit": "60a60d7",
        "file": "client/pages/recipes/index.vue"
      },
      "content": [
        {
          "type": "paragraph",
          "content": [
            {
              "type": "text",
              "text": "将食谱列表页面中暂时填充的假数据删去，通过 "
            },
            {
              "type": "text",
              "text": "asyncData",
              "marks": [
                {
                  "type": "code"
                }
              ]
            },
            {
              "type": "text",
              "text": " 方法获取数据。由于我们之前配置好了 axios，所以 "
            },
            {
              "type": "text",
              "text": "asyncData",
              "marks": [
                {
                  "type": "code"
                }
              ]
            },
            {
              "type": "text",
              "text": " 函数可以获取到 "
            },
            {
              "type": "text",
              "text": "$axios",
              "marks": [
                {
                  "type": "code"
                }
              ]
            },
            {
              "type": "text",
              "text": " 对象用于发起 HTTP 请求。我们实现页面加载的数据获取以及 "
            },
            {
              "type": "text",
              "text": "deleteRecipe",
              "marks": [
                {
                  "type": "code"
                }
              ]
            },
            {
              "type": "text",
              "text": " 事件，代码如下："
            }
          ]
        }
      ]
    },
    {
      "type": "diff_block",
      "attrs": {
        "hiddenLines": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          57,
          58,
          59,
          78,
          97,
          98,
          99,
          100
        ],
        "commit": "60a60d7",
        "file": "client/pages/recipes/index.vue"
      }
    },
    {
      "type": "explain",
      "attrs": {
        "level": "file",
        "pos": "post",
        "commit": "60a60d7",
        "file": "client/pages/recipes/index.vue"
      },
      "content": [
        {
          "type": "paragraph",
          "content": []
        }
      ]
    },
    {
      "type": "file_end",
      "attrs": {
        "commit": "60a60d7",
        "file": "client/pages/recipes/index.vue"
      }
    },
    {
      "type": "file_start",
      "attrs": {
        "commit": "60a60d7",
        "file": "client/pages/recipes/_id/index.vue"
      }
    },
    {
      "type": "explain",
      "attrs": {
        "level": "file",
        "pos": "pre",
        "commit": "60a60d7",
        "file": "client/pages/recipes/_id/index.vue"
      },
      "content": [
        {
          "type": "heading",
          "attrs": {
            "level": 3
          },
          "content": [
            {
              "type": "text",
              "text": "实现食谱详情页面"
            }
          ]
        },
        {
          "type": "paragraph",
          "content": [
            {
              "type": "text",
              "text": "我们进一步实现食谱详情页面。在 pages/recipes 目录中创建 _id 目录，在其中添加 index.vue 文件，代码如下："
            }
          ]
        }
      ]
    },
    {
      "type": "diff_block",
      "attrs": {
        "hiddenLines": [],
        "commit": "60a60d7",
        "file": "client/pages/recipes/_id/index.vue"
      }
    },
    {
      "type": "explain",
      "attrs": {
        "level": "file",
        "pos": "post",
        "commit": "60a60d7",
        "file": "client/pages/recipes/_id/index.vue"
      },
      "content": [
        {
          "type": "paragraph",
          "content": []
        }
      ]
    },
    {
      "type": "file_end",
      "attrs": {
        "commit": "60a60d7",
        "file": "client/pages/recipes/_id/index.vue"
      }
    },
    {
      "type": "explain",
      "attrs": {
        "fixed": true,
        "level": "step",
        "pos": "post",
        "commit": "60a60d7"
      },
      "content": [
        {
          "type": "paragraph",
          "content": [
            {
              "type": "text",
              "text": "为了测试前端页面能否真正从后端获取数据，我们先要在后端数据库中添加一些数据，而这对 Django 来说就非常方便了。进入 api 目录，运行 "
            },
            {
              "type": "text",
              "text": "python manage.py runserver",
              "marks": [
                {
                  "type": "code"
                }
              ]
            },
            {
              "type": "text",
              "text": " 打开服务器，然后进入后台管理页面（"
            },
            {
              "type": "text",
              "text": "http://localhost:8000/admin",
              "marks": [
                {
                  "type": "link",
                  "attrs": {
                    "href": "http://localhost:8000/admin",
                    "title": ""
                  }
                }
              ]
            },
            {
              "type": "text",
              "text": "），添加一些数据："
            }
          ]
        },
        {
          "type": "paragraph",
          "content": [
            {
              "type": "image",
              "attrs": {
                "src": ".tuture/assets/add-data-in-admin.jpg",
                "alt": "",
                "title": ""
              }
            }
          ]
        },
        {
          "type": "paragraph",
          "content": [
            {
              "type": "text",
              "text": "再运行前端页面，可以看到我们刚刚在 Django 后台管理中添加的项目："
            }
          ]
        },
        {
          "type": "paragraph",
          "content": [
            {
              "type": "image",
              "attrs": {
                "src": ".tuture/assets/recipe-list.jpg",
                "alt": "",
                "title": ""
              }
            }
          ]
        }
      ]
    },
    {
      "type": "step_end",
      "attrs": {
        "commit": "60a60d7"
      }
    }
  ]
}
